#!/usr/bin/env bash

# This improved version of the prompt shows the return value of the last command,
# what time the command was run, the git branch name and status if in a repo folder
# and the working directory as usual.
# Source the ANSI color codes before sourcing this file, otherwise it won't work.

get_git_branch() {
    local branch

    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
        if [[ "$branch" == "HEAD" ]]; then
            branch='detached*'
        fi
    else
        # Not in a git repository. Show nothing.
        echo ''
        return
    fi
    echo "$branch"
}

separator() {
    if [ $1 -eq 0 ]; then
        echo -n "$FGRN"
    else
        echo -n "$FRED"
    fi
    # 21 is the size of the date and time shown in the separator line.
    for i in $(seq 1 $((COLUMNS-21))); do
        echo -n "-"
    done
    echo -n "[\D{%F %T}]"
    # Reset prompt color.
    echo -n "$RS"
}

set_bash_prompt() {
    # Grab the return code of the last ran command.
    local ret_code="$?"
    local git_branch="$(get_git_branch)"

    if [ "${git_branch}" != "" ]; then
        git_branch="($git_branch)"
    else
        git_branch=""
    fi

    local prompt_char
    local separator
    local user_host
    local working_dir

    separator="$(separator $ret_code)$HC$FBLK"
    prompt_char="$RS$HC$FCYN$"
    user_host="$USER@$HOSTNAME"
    working_dir="[\w]"

    # Prompt first line.
    PS1="$separator$user_host $working_dir $git_branch\n"
    # Prompt second line.
    PS1="$PS1$prompt_char$RS "
}

new_bash_prompt () {
    local ret_code="$?"
    local date_size=10  # 2016-01-01
    local time_size=8  # 00:00:00
    local separator_size=1  # @
    local num_spaces=$(( COLUMNS - ${#USER} - ${#HOSTNAME} - date_size - time_size - separator_size ))  # 1 for the @
    local initial_spaces=$(( (num_spaces/2) - 1 ))
    local remaining_spaces=$(( num_spaces - initial_spaces ))

    # Change background color to red if the previous command failed.
    if [ $ret_code -eq 0 ]; then
        PS1="$BWHT"
    else
        PS1="$BRED"
    fi

    # Insert the date, user,  hostname and time in the separating line, in the following format:
    # "2016-01-01  ...  user@hostname  ...  00:00:00", with black font and white background.
    PS1="$PS1$FBLK\D{%F}"
    # The first part of the separating line.
    for i in `seq $((initial_spaces))`; do
        PS1="$PS1 "
    done
    # Add the "user@hostname" part.
    PS1="$PS1$USER@$HOSTNAME"
    # The second part of the separating line.
    for i in `seq $((remaining_spaces))`; do
        PS1="$PS1 "
    done
    PS1="$PS1\D{%T}"

    # Finish the separating line, reseting the colors.
    PS1="$PS1$RS\n"
    # Add working directory.
    PS1="$PS1$HC$FBLE[\w]\n"
    # Add prompt char.
    PS1="$PS1$FWHT\$$RS "
}

PROMPT_COMMAND="new_bash_prompt"
