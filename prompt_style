#!/usr/bin/env bash

# This improved version of the prompt shows the return value of the last command,
# what time the command was run, the git branch name and status if in a repo folder
# and the working directory as usual.
# Source the ANSI color codes before sourcing this file, otherwise it won't work.

get_git_branch() {
    local branch

    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
        if [[ "$branch" == "HEAD" ]]; then
            branch='detached*'
        fi
    else
        # Not in a git repository. Show nothing.
        echo ''
        return
    fi
    echo "$branch"
}

separator() {
    if [ $1 -eq 0 ]; then
        echo -n "$FGRN"
    else
        echo -n "$FRED"
    fi
    # 21 is the size of the date and time shown in the separator line.
    for i in $(seq 1 $((COLUMNS-21))); do
        echo -n "-"
    done
    echo -n "[\D{%F %T}]"
    # Reset prompt color.
    echo -n "$RS"
}

set_bash_prompt() {
    # Grab the return code of the last ran command.
    local ret_code="$?"
    local git_branch="$(get_git_branch)"

    if [ "${git_branch}" != "" ]; then
        git_branch="($git_branch)"
    else
        git_branch=""
    fi

    local prompt_char
    local separator
    local user_host
    local working_dir

    separator="$(separator $ret_code)$HC$FBLK"
    prompt_char="$RS$HC$FCYN$"
    user_host="$USER@$HOSTNAME"
    working_dir="[\w]"

    # Prompt first line.
    PS1="$separator$user_host $working_dir $git_branch\n"
    # Prompt second line.
    PS1="$PS1$prompt_char$RS "
}

# Only set PROMPT_COMMAND once.
if [ "$PROMPT_COMMAND" == "" ];then
    PROMPT_COMMAND="set_bash_prompt;$PROMPT_COMMAND"
fi
